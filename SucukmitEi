------------------------------------------
------------------------------------------
--------------------------------- STAND --
-- BongSession420#9366 -------------------
---------------------------- Privat Lua --
------------------------------------------
------------------------------------------

local SCRIPT_VERSION = "0.2"

---
--- Auto-Updater Lib Install
---

-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, "auto-updater")
if not status then
    local auto_update_complete = nil util.toast("Installing auto-updater...", TOAST_ALL)
    async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
            function(result, headers, status_code)
                local function parse_auto_update_result(result, headers, status_code)
                    local error_prefix = "Error downloading auto-updater: "
                    if status_code ~= 200 then util.toast(error_prefix..status_code, TOAST_ALL) return false end
                    if not result or result == "" then util.toast(error_prefix.."Found empty file.", TOAST_ALL) return false end
                    filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                    local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                    if file == nil then util.toast(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                    file:write(result) file:close() util.toast("Successfully installed auto-updater lib", TOAST_ALL) return true
                end
                auto_update_complete = parse_auto_update_result(result, headers, status_code)
            end, function() util.toast("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
    async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
    if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
    auto_updater = require("auto-updater")
end
if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end

local auto_update_config = {
    source_url="https://raw.githubusercontent.com/BongSession420/Overlay/blob/main/Overlay.lua",
    script_relpath=SCRIPT_RELPATH,
    verify_file_begins_with="--",
    check_interval=604800,
    dependencies={}
}




menu.action(menu.my_root(), "Check for Update", {}, "The script will automatically check for updates at most daily, but you can manually check using this option anytime.", function()
    auto_update_config.check_interval = 0
    if auto_updater.run_auto_update(auto_update_config) then
        util.toast("No updates found")
    end
end)

local bar_colours = {		
    ["r"] = 1.0,
    ["g"] = 0.0,
    ["b"] = 1.0,
    ["a"] = 1.0
}

local txt = "Stand 99.2-Dev Toxic Edition"

local txt_colours = {
    ["r"] = 1.0,
    ["g"] = 1.0,
    ["b"] = 1.0,
    ["a"] = 1.0
}

local txt_posX = 0.001 --Standard-X
local txt_posY = 0.027 --Standard-Y
local txt_skala = 0.55 --Standard-Skala

local bar_posX = 0.208 --Standard-X
local bar_posY = 0.028 --Standard-Y
local bar_posZ = 0.022 --Standard-Z

util.require_natives(1651208000)

function newColor(R, G, B, A)
return {r = R, g = G, b = B, a = A}
end

local run = false
local x, y = directx.get_client_size()
local ratio = x/y
local size = 0.03
local boxMargin = size / 7
local overlay_x = 0.0400
local overlay_y = 0.0400
local key_text_color = newColor(1, 1, 1, 1)
local background_colour = newColor(0, 0, 0, 0.2)
local pressed_background_colour = newColor(2.55/255, 2.55/255, 2.55/255, 0.5490196078431373)
local spaceBarLength = 3
local spaceBarSlim = 1
local altSpaceBar = 0

local wasd = {
[1]  = { code = 0x51,  key = 'Q',     show = true },
[2]  = { code = 0x57,  key = 'W',     show = true },
[3]  = { code = 0x45,  key = 'E',     show = true },
[4]  = { code = 0x52,  key = 'R',     show = true },
[5]  = { code = 0x41,  key = 'A',     show = true },
[6]  = { code = 0x53,  key = 'S',     show = true },
[7]  = { code = 0x44,  key = 'D',     show = true },
[9]  = { code = 0x10,  key = 'Shift', show = true },
[8]  = { code = 0x46,  key = 'F',     show = true },
[10] = { code = 0x11,  key = 'Strg',  show = true },
[11] = { code = 0x20,  key = 'Leertaste', show = true },
}

wasd_liste = menu.list(menu.my_root(), "Tastatur", {}, "", function(); end)
menu.toggle(wasd_liste, 'Tastatur', {'wasd-overlay'}, '', function(on)
run = on
end, false)
menu.slider(wasd_liste, 'X Position', {'x-position'}, '',1 , 10000, overlay_x * 10000, 1, function(value)
overlay_x = value / 10000
end)
menu.slider(wasd_liste, 'Y Position', {'y-position'}, '',1 , 10000, overlay_y * 10000, 1, function(value)
overlay_y = value / 10000
end)
menu.slider(wasd_liste, 'Größe', {'size'}, '',1 , 10000, 300, 1, function(value)
size = value / 10000
boxMargin = size / 7
end)
local hideKey = false
menu.toggle(wasd_liste, 'Text ausblenden', {'hide-text'}, '', function(toggle)
hideKey = toggle
end)
local color_root = menu.list(wasd_liste, 'Farben', {''}, '')
menu.colour(color_root, 'Textfarbe', {'text-color'}, '', key_text_color, true, function(colour)
key_text_color = colour
end)
menu.colour(color_root, 'Hintergrundfarbe', {'bg-color'}, '', background_colour, true, function(colour)
background_colour = colour
end)
menu.rainbow(menu.colour(color_root, 'Farbe drücken', {'press-color'}, '', pressed_background_colour, true, function(colour)
pressed_background_colour = colour
end))

local hide_root = menu.list(wasd_liste, 'Tasten verstecken', {''}, '')
for i = 1, #wasd do
menu.toggle(hide_root, wasd[i].key, {}, '', function(toggle)
wasd[i].show = not toggle
end)
end

menu.toggle(wasd_liste, 'Kurze Leertaste', {'short-space'}, '', function(toggle)
if toggle then
spaceBarLength = 2
else
spaceBarLength = 3
end
end)
menu.toggle(wasd_liste, 'Schlanke Leertaste', {'slim-space'}, '', function(toggle)
if toggle then
spaceBarSlim = 2
else
spaceBarSlim = 1
end
end)
local center_space_toggle center_space_toggle = menu.toggle(wasd_liste, 'Zentrierete Leertaste', {'alt-space'}, 'Macht Platz zentriert unter A, S, D. Dies erfordert, dass Umschalt und Strg ausgeschaltet sind.', function(toggle)
if altShiftCtrl and (wasd[10].show or wasd[9].show) then
altSpaceBar = 1
return
end
if toggle then
altSpaceBar = 0
else
altSpaceBar = 1
end
end, true)

menu.toggle(wasd_liste, 'Schlank Shift und Strg', {'slim-shift-ctrl'}, '', function(toggle)
altShiftCtrl = toggle
if toggle and menu.get_value(center_space_toggle) == 1 then
menu.trigger_command(center_space_toggle, 'off')
else
menu.trigger_command(center_space_toggle, 'on')
end
end)

util.create_tick_handler(function()
if run then
for i = 1, #wasd - 3 do
    if wasd[i].show then
        directx.draw_rect(overlay_x + (boxMargin + size) * (i > 4 and i - 5 or i - 1), overlay_y + (i > 4 and (boxMargin + size * ratio) or 0)* 1.05, size, size * ratio, util.is_key_down(wasd[i].code) and pressed_background_colour or background_colour)
        if not hideKey then
            directx.draw_text(overlay_x + (boxMargin + size) * (i > 4 and i - 5 or i - 1)+ size * 0.45,(i > 4 and  overlay_y + (boxMargin + size * ratio)* 1.2 or  overlay_y*1.07) , wasd[i].key, 1, size *20, key_text_color, false)
        end
    end
end
if altShiftCtrl then
    if wasd[#wasd - 2].show then
        directx.draw_rect(overlay_x, overlay_y + (boxMargin + size)* ratio * 2,(boxMargin + size) - boxMargin, size * ratio / 2, util.is_key_down(wasd[#wasd - 2].code) and pressed_background_colour or background_colour)
    end
    if wasd[#wasd - 1].show then
        directx.draw_rect(overlay_x, overlay_y + (boxMargin + size)* ratio * 2.5,(boxMargin + size) - boxMargin, size * ratio / 2, util.is_key_down(wasd[#wasd - 1].code) and pressed_background_colour or background_colour)
    end
else
    for i = 9, 10 do
        if wasd[i].show then
            directx.draw_rect(overlay_x - (boxMargin + size), overlay_y + (boxMargin + size * ratio) * (i - 8) * 1.05, size, size * ratio, util.is_key_down(wasd[i].code) and pressed_background_colour or background_colour)
            if not hideKey then
                directx.draw_text(overlay_x - (boxMargin + size)+ size * 0.45,(i > 4 and  overlay_y + (boxMargin + size * ratio) * (i - 8)* 1.2 or  overlay_y*1.07) , wasd[i].key, 1, size *20, key_text_color, false)
            end
        end
    end
end
if wasd[#wasd].show then
    directx.draw_rect(overlay_x + (boxMargin + size) * altSpaceBar, overlay_y + (boxMargin + size)* ratio * 2,(boxMargin + size) * spaceBarLength - boxMargin, size * ratio / spaceBarSlim, util.is_key_down(wasd[#wasd].code) and pressed_background_colour or background_colour)
end
end
end)

util.toast("Vielen Dank, dass Sie Overlay.lua von BongSession420#9366 verwenden <3")

GenerateFeatures = function()
Top_Bar_liste = menu.list(menu.my_root(), "Top Bar", {}, "", function(); end)
menu.toggle(Top_Bar_liste,"Top Bar ausblenden", {"top_bar"}, "",function(pog)	
spo = pog
end)	
Obere_Bar = menu.list(Top_Bar_liste, "Bar Optionen")
menu.divider(Obere_Bar, "Bar Optionen")
menu.rainbow(menu.colour(Obere_Bar, "Bar Farbe", {"barc"}, "", bar_colours, true, function(colour)
bar_colours = colour
end))
menu.slider(Obere_Bar, "Bar X Position", {"bxpos"}, "Standard-X: 208", 0, 10000, 208, 1, function(X)
bar_posX=X/1000
end)
menu.slider(Obere_Bar, "Bar Y Position", {"bypos"}, "Standard-Y: 28", 0, 10000, 28, 1, function(Y)
bar_posY=Y/1000
end)
menu.slider(Obere_Bar, "Bar Z Position", {"bzpos"}, "Standard-Z: 22", 0, 10000, 22, 1, function(Z)
bar_posZ=Z/1000
end)
menu.action(Obere_Bar,"Standard Bar Position", {"def_bar"}, "",function()
bar_posX = 0.208 --Standard-X
bar_posY = 0.028 --Standard-Y
bar_posZ = 0.022 --Standard-Z
end)
Obere_txt = menu.list(Top_Bar_liste, "Text Optionen")
menu.divider(Obere_txt, "Text Optionen")
menu.action(Obere_txt, "Texte ändern", {"ttxt"}, "Ändere den Text", function(click_type)
menu.show_command_box_click_based(click_type, "ttxt ")
end, function(arg)
txt = arg
end, "ttxt [text]")
menu.rainbow(menu.colour(Obere_txt, "Textfarbe", {"txtc"}, "", txt_colours, true, function(colour)
txt_colours = colour
end))
menu.slider(Obere_txt, "Text X Position", {"btxtxpos"}, "Standard-X: 1", 0 , 10000, 1, 1, function(X)
txt_posX=X/1000
end)
menu.slider(Obere_txt, "Text Y Position", {"btxtypos"}, "Standard-Y: 27", 0, 10000, 27, 1, function(Y)
txt_posY=Y/1000
end)
menu.slider(Obere_txt, "Text Skala", {"btxtskala"}, "Standard-Skala: 555", 0, 10000, 555, 1, function(S)
txt_skala=S/1000
end)
menu.action(Obere_txt,"Standard Text Position", {"def_text"}, "",function()
txt_posX = 0.001 --Standard-X
txt_posY = 0.027 --Standard-Y
txt_skala = 0.55 --Standard-Skala
end)
end

GenerateFeatures()

while true do 
if spo then
elseif menu.is_open() then
local x, y = menu.get_position()
directx.draw_rect(		
x,			
y-bar_posY,	
bar_posX,	
bar_posZ,	
bar_colours	
)

directx.draw_text(	
x+txt_posX,			 
y-txt_posY, 
txt,		
ALIGN_TOP_LEFT,	
txt_skala,		
txt_colours,
names,
false				
)	

    else
    --kein thema ^^
end
util.yield() 
end			

while true do  
util.yield()
end